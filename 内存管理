2 内存管理
2.1 为什么要自己实现内存管理
C语言中的动态内存管理是malloc、free等函数实现的，但是在FreeRtos中并不适用。这些函数不适合在资源紧缺的嵌入式系统中使用，他们运行时会有不确定性，无法确定他们执行的时间，分配内存时还会出现碎片化的情况。

堆：heap是一块空闲的内存，使用时需要对其进行管理，采用malloc从堆中划出空间，用完后用free释放空间，之后可以再次使用。

栈：stack，函数调用时局部变量保存在栈中，当前程序的环境也是保存在栈中。可以从堆中分配一块空间作为栈。
2.2 FreeRtos内存管理方法
FreeRtos中内存管理的接口函数为：pvPortMalloc,vPortFree，对应于C库的malloc、free。
 
图表 11 内存管理方法
2.2.1 heap_1.c
只实现了pvPortMalloc没有实现vPortFree，实现起来最简单，没有碎片问题，一些要求非常严格的系统里不允许使用动态内存就可以使用heap_1。
实现内存分配的过程是：首先定义一个大的数组，用pvPortMalloc从数组中分配内存给用户。
 
图表 12 heap_1内存分配
 
图表 13 heap_1分配内存示意图
2.2.2 heap_2.c
heap_2是为了兼容以前的代码，新设计中不推荐使用heap_2建议使用heap_4。heap_2也是在数组上分配内存，他与heap_1不同的地方在于heap_2采用最佳匹配算法来分配内存，并且支持vPortFree。
最佳匹配算法：假如有三块内存空间，5字节，25字节，100字节，pvPortMalloc想申请25字节，系统会将它划分为20字节，5字节，返回20字节的地址，剩下的5字节是空闲的可以分配给其他函数。
由于heap_2也是在一个大数组中分配内存，这样划分空间会造成内存碎片化的问题。
举例如下：创建三个任务，删除中间任务，创建一个新的和原任务大小一样的任务
 
图表 14 heap_2分配内存示意图
2.2.3 heap_3.c
heap_3.c采用标准C语言库中的malloc,free函数分配内存，大小由连接器决定，但是在调度的过程中可能会打断malloc，是非线程安全的，如果先暂停调度器再去分配内存就可以实现内存安全。
2.2.4 heap_4.c
heap_4.c和heap_1、heap_2一样，也是用大数组来分配内存。heap_4采用首次适应算法来分配内存，他还会把相邻空闲内存合并为一个更大的内存空间，有助于减少内存的碎片问题。
首次适应算法：假设堆中有三块空闲内存:5字节，200字节，100字节，pvPortMalloc想申请20字节，找出一个能满足pvPortMalloc的内存:200字节，将他划分为20字节、180字节，返回这20字节的地址，剩下的180字节仍然是空闲状态，留给后续的pvPortMalloc使用。
heap4_c会把相邻的空间合并为一个大的空闲内存，可以减少内存的碎片化问题。

举例过程如下：
A：创建了三个任务
B：删除了一个任务
C：分配一个QUEUE
D：分配一个User
E：释放了QUEUE(vPortFree)
F：释放了User（前后的空闲内存合并成一块）
 
图表 15 heap_4c分配内存示意图
2.2.5 heap_5.c
heap_5分配内存和释放内存的算法和heap_c是一样的，相比于heap_4，heap_5不局限于管理一个大数组，它可以管理多块、分隔开的内存，在内存地址不连续的系统中适合使用heap_5。
既然内存块是分开的，就要对内存进行初始化:确定内存块的位置和大小
在使用pvPortMalloc之前必须先指定内存块的信息，使用vPortDefineHeapRegions来指定这些信息。

采用结构体HeapRegion来指定一块内存，使用结构体数组来指定多块数组。
 
图表 16 采用结构体指定内存块
 
图表 17 采用结构体数组指定内存块
这个结构体数组中每个元素都是结构体类型，第一个元素是{ ( uint8_t * ) 0x80000000UL, 0x10000 },第二个元素是{ ( uint8_t * ) 0x90000000UL, 0xa0000 }，第三个元素是{NULL,0}
2.3 heap函数
2.3.1 pvPortMalloc和vPortFree
pvPortMalloc负责分配内存，vPortFree负责释放内存，如果分配不成功返回NULL。
本质是将malloc函数变为了在已有数组中取出部分空间，再通过算法决定是否将剩下的数组合并。
 
图表 18 函数原型
2.3.2 xPortGetFreeHeapSize
xPortGetFreeHeapSize获取当前程序还有多少空闲内存，用这个函数可以得到内存的使用情况，之后可以用来减小程序在系统中的内存占比。
 
图表 19 函数原型
2.3.3 xPortGetMinimumEverFreeHeapSize
返回空闲内存容量的最小值，只支持heap4,heap5
 
图表 20 函数原型
2.3.4 malloc失败的钩子函数
在pvPortMalloc函数内部有一个钩子函数，在malloc失败时会调用钩子函数。
使用这个钩子函数时要将configUSE_MALLOC_FAILED_HOOK定义为1，然后提供vApplicationMallocFailedHook函数。
 
图表 21 函数原型
